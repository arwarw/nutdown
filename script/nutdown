#!/usr/bin/env perl

use warnings;
use strict;
use Sys::Syslog;
use Sys::Hostname;
use Config::General qw(ParseConfig SaveConfigString);
use UPS::Nut;
use IPC::Run qw(run);
use Data::Dumper qw(Dumper);
use Getopt::Long;
use Pod::Usage;
use utf8;

our $VERSION = '0.1';

my $configfile = "/etc/nutdown/nutdown.conf";
my $hostname = hostname();
my $dump_config = '';
my $help = '';
my $no_syslog = ''; # intentionally undocumented, just for the testsuite

GetOptions('dump-config' => \$dump_config, 'hostname=s' => \$hostname, 'configfile=s' => \$configfile, 'help|usage|?' => \$help, 'no-syslog' => \$no_syslog);

if ($help) {
	pod2usage(-exitval => 0, -verbose => 2);
	exit 0;
}

my $conf = create_hostconfig($configfile);

if ($dump_config) {
	print "# dumping config for: host $hostname in $configfile\n";
	use Data::Dumper qw(Dumper);
	print Dumper($conf);
	exit;
}

$SIG{CHLD} = "IGNORE";
my $ups;

unless(fork()) {
	openlog("nutdown", "pid", "daemon") unless $no_syslog;
	syslog("notice", "starting up with config $configfile, polling every ". $conf->{poll_interval}. "s") unless $no_syslog;

	my $last_state = 'OL'; # assume everything is fine at startup for a sensible initial event sequence
	my $last_charge = 100;
	my $offline = 0;

	do {
		$ups = maybe_connect_to_ups();
		syslog "err", "could not connect to UPS: $!" unless $ups;
		sleep $conf->{poll_interval};
	} while(! $ups);

	syslog "info", "upsd connection established, commencing main loop";
	while (1 == 1) {
		if (! $ups->{srvsock}) {
			$ups = maybe_connect_to_ups();
		}

		my $status;
		$status = $ups->Status();

		if (not defined($status)) {
			sleep($conf->{poll_interval});
			if (defined($offline) and $offline > 60 and $offline <= 60 + $conf->{poll_interval}) {
				execute_action($conf->{event}->{offline});
			}
			if (defined($offline) and $offline > 3600 and $offline <= 3600 + $conf->{poll_interval}) {
				execute_action($conf->{event}->{offline_long});
			}
			$offline += $conf->{poll_interval};
			next;
		} else {
			$offline = 0;
		}

		if ($status =~ m/FSD/) {
			# forced shutdown state, UPS will cut power soon
			execute_action($conf->{event}->{forced_shutdown});
		}

		if ($status =~ m/^OB/) {
			# on battery

			if ($last_state ne 'OB') {
				execute_action($conf->{event}->{power_fail});
			}

			my $battery = $ups->BattPercent();
			if (defined($battery)) {
				if ($battery != $last_charge) {
					my $i;
					for ($i = $last_charge; $i > $battery; $i--) {
						# execute all actions between the last known battery charge and the current charge
						if (exists($conf->{event}->{$i})) {
							execute_action($conf->{event}->{$i});
						}
					}
				}
				$last_charge = $battery + 0; # we want a sane number, no leading zeroes or stuff, so force a cast
			} else {
				if ($last_state eq 'OB') {
					# we didn't get a percentage twice, do something
					execute_action($conf->{event}->{unknown_percentage});
				} else {
					# we didn't get a percentage once, that may be bad
				}
			}
			$last_state = 'OB';
		} elsif ($status =~ m/^OL/) {
			# on line power

			if ($last_state ne 'OL') {
				# power has returned recently
				execute_action($conf->{event}->{power_return});
			}

			$last_state = 'OL';
			$last_charge = 100; # set to 100 so the next powerfail will always execute all the powerfail and percentage actions from 100 down to the current percentage
		} else {
			# some unknown status

			if ($last_state ne 'unknown_status') {
				syslog("warning", "reconnecting because of unparseable status ". $status // "undef") unless $no_syslog;
				execute_action($conf->{event}->{unknown_status});
				$last_state = 'unknown_status';
			}
		}

		sleep($conf->{poll_interval});
	}
}

exit 0;

sub execute_action {
	my $action = shift;
	if (defined $action) {
		if ($action->{syslog}) {
			syslog("info", $action->{syslog}) unless $no_syslog;
		}

		$ups->Logout(); # close ups connection before fork()ing, UPS::Nut crashes if we don't
		if ($action->{exec}) {
			unless(fork()) {
				run $action->{exec};
				exit 0;
			}
		}
	}
}

sub maybe_connect_to_ups {
	my $ret =  new UPS::Nut(NAME => $conf->{ups}->{name},
				HOST => $conf->{ups}->{host},
				PORT => $conf->{ups}->{port},
				USERNAME => $conf->{ups}->{username},
				PASSWORD => $conf->{ups}->{password},
				TIMEOUT => $conf->{ups}->{timeout});

	unless (defined($ret)) {
		syslog("err", "could not connect to ups ". $conf->{ups}->{name} // "undef") unless $no_syslog;
		return $ret;
	}

	return $ret;
}

sub create_hostconfig
{
	my $configfile = shift;
	my %conf;
	my %prevconf;
	my $defaultconfig = {
		poll_interval => 30,
	};

	%conf = ParseConfig(-ConfigFile => $configfile, -DefaultConfig => $defaultconfig, -MergeDuplicateBlocks => 1, -MergeDuplicateOptions => 1);
	if (exists $conf{host} and exists $conf{host}->{$hostname}) {
		if (exists $conf{host}->{$hostname}->{group} and exists $conf{group} and exists $conf{group}->{$conf{host}->{$hostname}->{group}}) {
			%prevconf = %conf;
			%conf = ParseConfig(-String => SaveConfigString($prevconf{group}->{$prevconf{host}->{$hostname}->{group}}), -DefaultConfig => \%prevconf, -MergeDuplicateBlocks => 1, -MergeDuplicateOptions => 1);
		}
		%prevconf = %conf;
		%conf = ParseConfig(-String => SaveConfigString($prevconf{host}->{$hostname}), -DefaultConfig => \%prevconf, -MergeDuplicateBlocks => 1, -MergeDuplicateOptions => 1);
	}

	return \%conf;
}

__END__

=encoding UTF-8

=head1 NAME

nutdown - nut UPS client for configurable actions on power failures

=head1 SYNOPSIS

nutdown [--help|--usage] [--configfile I<file>] [--hostname I<hostname>] [--dump-config]

=head1 OPTIONS

=over 8

=item B<--help>

Print this help message and exit

=item B<--configfile I<file>>

Read the configuration file named I<file> instead of the default F</etc/nutdown/nutdown.conf>.

=item B<--hostname I<hostname>>

Assume, for the purpose of parsing the configuration, that the hostname is I<hostname> instead of looking up the
hostname via L<Sys::Hostname>. This is intended for cases where L<Sys::Hostname> fails or to test configurations on different
hosts.

=item B<--dump-config>

Read the configuration, dump it via L<Data::Dumper> and exit. This is intended for testing.

=back

=head1 DESCRIPTION

B<nutdown> will start a daemon that periodically polls the state of an uninteruptible power supply (UPS) via
nutd. Upon encountering certain events such as power failure, power return or the battery charge falling
below certain configurable thresholds, configurable events such as the execution of a command are executed.

=head1 EXAMPLES

=over 8

=item C<nutdown>

Start B<nutdown> normally. B<nutdown> will fork into the background and do its work according to its configuration
in the default location F</etc/nutdown/nutdown.conf>.

=item C<nutdown --hostname examplehost --configfile nutdown.WIP.conf --dump-config>

Assume a hostname of I<examplehost>, parse the configuration file named I<nutdown.WIP.conf> and dump the configuration
that would be used on that host. This is useful to test the default/host/group configuration mechanism that nutdown
provides without actually having to be on host I<examplehost>.

=back

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2013 Alexander Würstlein L<mailto:arw@arw.name>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

=head1 VERSION

Version 0.1

=head1 AUTHOR

Alexander Würstlein, C<< <arw@arw.name> >>
